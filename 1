// Алгоритм сортировки слиянием

object MergeSort {
  def main(args: Array[String]): Unit = {
    val arr = Array(5, 2, 8, 4, 1, 9, 6, 3, 7)
    val sortedArr = mergeSort(arr)
    println(sortedArr.mkString(", "))
  }

  def mergeSort(arr: Array[Int]): Array[Int] = {
    if (arr.length <= 1) arr
    else {
      val mid = arr.length / 2
      val (left, right) = arr.splitAt(mid)
      merge(mergeSort(left), mergeSort(right))
    }
  }

  def merge(left: Array[Int], right: Array[Int]): Array[Int] = {
    var merged = Array.empty[Int]
    var i, j = 0
    while (i < left.length && j < right.length) {
      if (left(i) <= right(j)) {
        merged :+= left(i)
        i += 1
      } else {
        merged :+= right(j)
        j += 1
      }
    }
    if (i < left.length) merged ++= left.slice(i, left.length)
    if (j < right.length) merged ++= right.slice(j, right.length)
    merged
  }
}
